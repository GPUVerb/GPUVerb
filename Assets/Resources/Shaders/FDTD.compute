// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel KernFDTD
#pragma kernel KernZero
#pragma kernel KernTest
#pragma kernel KernAddBounds
#pragma kernel KernRemoveBounds


struct Cell {
	float pressure;
	float velX;
	float velY;
	int   b;
};
struct BoundaryInfo {
	float absorption;
};

// used by FDTD
RWStructuredBuffer<BoundaryInfo> boundaries;
RWStructuredBuffer<Cell>       grid;
StructuredBuffer<float>        gaussianPulse;
float2                         listenerPos;
int3                           gridDim; // (x dim, y dim, time dim)
int                            curTime;
float                          courant;

// used by geometry updates
int4 updateDim;
float updateAbsorption;

#define IDX(i,j) ((i) * gridDim[0] + (j))

// #define IDX3(i, j, t) ((j) * gridDim[1] * gridDim[2] + (i) * gridDim[2] + (t))
#define IDX3(i, j, t) ((t) * gridDim[0] * gridDim[1] + (i) * gridDim[0] + (j))

#define VALID(i,j) ((i) < gridDim[1] && (j) < gridDim[0])

int GetB(int i) {
	return grid[i].b & 0xffff;
}
int GetBy(int i) {
	return grid[i].b >> 16 & 0xffff;
}
void WriteB(int val, int i) {
	grid[i].b &= 0xffff0000; // little endian, so it's not 0x0000ffff
	grid[i].b |= val & 0xffff;
}
void WriteBy(int val, int i) {
	grid[i].b &= 0x0000ffff;
	grid[i].b |= (val & 0xffff) << 16;
}

[numthreads(8, 8, 1)]
void KernTest(uint3 id : SV_DispatchThreadID) {
	const int i = id.y;
	const int j = id.x;
	if (!VALID(i, j)) {
		return;
	}

	if (curTime == 0) {
		Cell c;
		c.pressure = 0;
		c.velX = 0;
		c.velY = 0;
		c.b = 0;
		grid[IDX3(i, j, 0)] = c;
	} else {
		grid[IDX3(i, j, curTime)] = grid[IDX3(i, j, curTime - 1)];
		WriteB(GetB(IDX3(i, j, curTime)) + (i + 1) * (j + 1), IDX3(i, j, curTime));
	}
}

// required binding: gridDim, grid
[numthreads(8, 8, 1)]
void KernZero(uint3 id : SV_DispatchThreadID) {
	const int i = id.y;
	const int j = id.x;

	if (!VALID(i, j)) {
		return;
	}

	Cell c = grid[IDX3(i, j, 0)];
	// the b fields are not zeroed.
	// and are set by the add/removeBounds functions
	c.pressure = 0;
	c.velX = 0;
	c.velY = 0;
	grid[IDX3(i, j, 0)] = c;
}

// required binding:
// gridDim, updateDim, grid, boundaries
[numthreads(8, 8, 1)]
void KernRemoveBounds(uint3 id : SV_DispatchThreadID) {
	const int i = id.y;
	const int j = id.x;
	if (j >= updateDim[2] - updateDim[0] || i >= updateDim[3] - updateDim[1]) {
		return;
	}

	const int gi = i + updateDim[1];
	const int gj = j + updateDim[0];

	boundaries[IDX(gi, gj)].absorption = 0;

	const int idx = IDX3(gi, gj, 0);
	if (gi == gridDim[1] - 1 || gj == gridDim[0] - 1) {
		WriteB(0, idx);
		WriteBy(0, idx);
	} else if (gi == 0) {
		WriteB(1, idx);
		WriteBy(0, idx);
	} else {
		WriteB(1, idx);
		WriteBy(1, idx);
	}
}

// required binding:
// gridDim, updateDim, updateAbsorption, grid, boundaries
[numthreads(8, 8, 1)]
void KernAddBounds(uint3 id : SV_DispatchThreadID) {
	const int i = id.y;
	const int j = id.x;
	if (j >= updateDim[2] - updateDim[0] || i >= updateDim[3] - updateDim[1]) {
		return;
	}
	const int gi = i + updateDim[1];
	const int gj = j + updateDim[0];
	boundaries[IDX(gi, gj)].absorption = updateAbsorption;

	const int idx = IDX3(gi, gj, 0);
	WriteB(0, idx);
	WriteBy(0, idx);
}


float CalculateVel(const int ni, const int nj, const int i, const int j, const int t, const float curVel) {
	const Cell c = grid[IDX3(i, j, t)];
	const Cell neighbor = grid[IDX3(ni, nj, t)];

	const float betaN = GetB(IDX3(ni, nj, t));
	const float rn = boundaries[IDX(ni, nj)].absorption;
	const float yn = (1.f - rn) / (1.f + rn);
	const float beta = GetB(IDX3(i, j, t));
	const float r = boundaries[IDX(i, j)].absorption;
	const float y = (1.f - r) / (1.f + r);

	const float gradient = c.pressure - neighbor.pressure;
	const float airUpdate = curVel - courant * gradient;
	const float yBoundary = beta * yn + betaN * y;
	const float wallUpdate = yBoundary * (neighbor.pressure * betaN + c.pressure * beta);

	return beta * betaN * airUpdate + (betaN - beta) * wallUpdate;
}

// A single iteration of FDTD solver
// required binding: 
//     gridDim, curTime, grid, boundaries, courant, listenerPos, gaussianPulse
// reads from gridIn and writes to gridOut
[numthreads(8, 8, 1)]
void KernFDTD(
	//uint3 groupID : SV_GroupID, 
	//uint3 groupThreadID : SV_GroupThreadID,
	//uint groupIndex : SV_GroupIndex,
	uint3 id : SV_DispatchThreadID)
{
	const int i = id.y;
	const int j = id.x;
	const int t = curTime;

	if (!VALID(i, j)) {
		return;
	}

	Cell prevCell = grid[IDX3(i, j, t - 1)];
	// copy from previous time step
	grid[IDX3(i, j, t)].b = prevCell.b;
	grid[IDX3(i, j, t)].velX = prevCell.velX;
	grid[IDX3(i, j, t)].velY = prevCell.velY;

	if (i == listenerPos[1] && j == listenerPos[0]) {
		prevCell.pressure += gaussianPulse[t - 1];
	}

	// pressure
	{
		float divergence = 0;
		if (VALID(i + 1, j) && VALID(i, j + 1)) {
			const Cell cy = grid[IDX3(i + 1, j, t - 1)];
			const Cell cx = grid[IDX3(i, j + 1, t - 1)];
			divergence = (cx.velX - prevCell.velX) + (cy.velY - prevCell.velY);
		} else if (VALID(i + 1, j)) {
			const Cell cy = grid[IDX3(i + 1, j, t - 1)];
			divergence = -prevCell.velX + (cy.velY - prevCell.velY);
		} else if (VALID(i, j + 1)) {
			const Cell cx = grid[IDX3(i, j + 1, t - 1)];
			divergence = (cx.velX - prevCell.velX) - prevCell.velY;
		}

		grid[IDX3(i, j, t)].pressure = GetB(IDX3(i, j, t - 1)) * (prevCell.pressure - courant * divergence);

		AllMemoryBarrier();
	}

	Cell myCell = grid[IDX3(i, j, t)];

	// velocity x
	if (j > 0 && j < gridDim[0] - 1) {
		myCell.velX = CalculateVel(i, j - 1, i, j, t, myCell.velX);
	}


	if (j == 0) {
		// top
		myCell.velX = -myCell.pressure;
	} else if (j == gridDim[0] - 1) {
		// bottom
		myCell.velX = grid[IDX3(i, j - 1, t)].pressure;
	}

	// velocity Y
	if (i > 0 && i < gridDim[1] - 1) {
		myCell.velY = CalculateVel(i - 1, j, i, j, t, myCell.velY);
	}

	if (i == 0) {
		// left
		myCell.velY = -myCell.pressure;
	} else if (i == gridDim[1] - 1) {
		// right
		myCell.velY = grid[IDX3(i - 1, j, t)].pressure;
	}

	// write to grid
	grid[IDX3(i, j, t)] = myCell;
}